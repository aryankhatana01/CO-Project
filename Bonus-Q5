print(' ')
print("_____________________Memory Mumbo Jumbo_____________________")
print(' ')
print("PLease enter the memory space")
mem_space=[str(i) for i in input().split()]
value=int(mem_space[0])
size=[]
mem=mem_space[1]
bit_flag=1
true_Sz=[]
int_val=0
a=0
bt=["b","kb","Mb","Gb","Tb","Pb","Eb"]
byt=["B","kB","MB","GB","TB","PB","EB"]
# for v in mem_space:
#     a=v[1]
#     b=a.split()
#     size.append(b)
# for v in size:
#     true_Sz.append(v[0])
# for z in true_Sz:
#     if "B" in true_Sz:
#         bit_flag=1
#     else:
#         bit_flag=0
if mem_space[1] in bt:
    bit_flag=0
else:
    bit_flag=1

int_val_conv=0
pow=1
while(a!=value):
    a=2**pow
    pow=pow+1
int_val_conv=pow-1
if mem=="Bit Addressable Memory":
    int_val_conv=8*int_val_conv
elif mem=="Nibble Addressable Memory":
    int_val_conv=4*int_val_conv
elif mem=="Byte Addressable Memory":
    int_val_conv=int_val_conv
else:
    int_val_conv=int_val_conv


if(bit_flag==1):
    if(mem_space[1]=="B"):
        int_val=0
    elif(mem_space[1]=="KB" or "kB"):
        int_val=10
    elif(mem_space[1]=="MB" or "mB"):
        int_val=20
    elif(mem_space[1]=="GB" or "gB"):
        int_val=30
    elif(mem_space[1]=="TB" or "tB"):
        int_val=40
    elif(mem_space[1]=="PB" or "pB"):
        int_val=50
    elif(mem_space[1]=="EB" or "eB"):
        int_val=60
elif (bit_flag==0):
    if(mem_space[1]=="b"):
        int_val=0
    elif(mem_space[1]=="Kb" or "kb"):
        int_val=10
    elif(mem_space[1]=="Mb" or "mb"):
        int_val=20
    elif(mem_space[1]=="Gb" or "gb"):
        int_val=30
    elif(mem_space[1]=="Tb" or "tb"):
        int_val=40
    elif(mem_space[1]=="Pb" or "pb"):
        int_val=50
    elif(mem_space[1]=="Eb" or "eb"):
        int_val=60

if (bit_flag==1):
    val_conv=int_val+int_val_conv
elif bit_flag==0:
    val_conv=(int_val-3)+int_val_conv

print(' ')
print("The types of memory are...")
print("1).Bit Addressable Memory")
print("2).Nibble Addressable Memory")
print("3).Byte Addressable Memory")
print("4).Word Addressable Memory")
mem_type= str(input("Please enter the type of memory..."))
print(' ')
print(' ')

print("_______________________________Part 1_______________________________")
print(' ')
print("The format for instructions is as follows:")
print("<Q bit opcode> <P-bit address> <n bit register>")
print("<Q bit opcode> <R bits filler> <n bit register> <n bit register>")
print(' ')
print("For the query enter the following values:")
l_ins=int(input("Enter the length of one instruction in bits : "))
l_reg=int(input("Enter the length of one register in bits : "))
print(" ")

tot_bits=val_conv
opcode=l_ins-(tot_bits+l_reg)
fil_bits=l_ins-(opcode+(2*l_reg))
n_ins=2**opcode
n_reg=2**l_reg
print("The number of bits required to represent an address is :",tot_bits)
print("The number of bits needed by the opcode are :",opcode)
print("The number of filler bits required are :",fil_bits)
print("The number of instructions that the given ISA can support are :",n_ins)
print("The number of registers that the given ISA can support are :",n_reg)
print(' ')
print(' ')


print("_______________________________Part 2_______________________________")
print(' ')
print("_______________________________Type 1_______________________________")
print("The initial memory space as given by the user is :",mem_space)
print("The initial type of memory as given by the user is :",mem_type)
print(' ')
print("Enter the size of memory...")
cpu=[str(i) for i in input().split()]
new_mem=str(input("Enter the type of memory :"))
cpu_value=int(cpu[0])
cpu_sz=0
pins_saved=0
a=0
pow=0
val=0
val1=0
val2=0
pow=0
while(val!=cpu_value):
    val=2**pow
    pow=pow+1
val1=pow

if cpu[1] in bt:
    bit_flag=0
else:
    bit_flag=1


if cpu[1]=="Byte" or cpu[1]=="byte":
    val1=val1
elif cpu[1]=="Bit" or cpu[1]=="bit":
    val1=val1-3

# if new_mem=="Bit Addressable Memory":
#     val1=8*val1
# elif new_mem=="Nibble Addressable Memory":
#     val1=4*val1
# elif new_mem=="Byte Addressable Memory":
#     val1=val1
# else:
#     val1=val1

# if bit_flag==1:
#     if(cpu[1]=="B"):
#         val2=0
#     elif(cpu[1]=="KB" or "kB"):
#         val2l=10
#     elif(cpu[1]=="MB" or "mB"):
#         val2=20
#     elif(cpu[1]=="GB"or "gB"):
#         val2=30
#     elif(cpu[1]=="TB" or "tB"):
#         val2=40
#     elif(cpu[1]=="PB"or "pB"):
#         val2=50
#     elif(cpu[1]=="EB"or "eB"):
#         val2=60
# elif bit_flag==0:
#     if(cpu[1]=="b"):
#         val2=0
#     elif(cpu[1]=="Kb" or "kb"):
#         val2l=10
#     elif(cpu[1]=="Mb" or "mb"):
#         val2=20
#     elif(cpu[1]=="Gb"or "gb"):
#         val2=30
#     elif(cpu[1]=="Tb" or "tb"):
#         val2=40
#     elif(cpu[1]=="Pb"or "pb"):
#         val2=50
#     elif(cpu[1]=="Eb"or "eb"):
#         val2=60

# tot_space=0
# if bit_flag==1:
#     tot_space=val1+val2
# elif bit_flag==0:
#     tot_space=val1+(val2-3)

# if new_mem==mem_type and new_mem!="Word Addressable Memory":
#     print(pins_saved)
# else:


# pins_saved=0
# val=0
# pow=0
# print(cpu_bit)
#     cpu_sz=pow-1
#     print(cpu_sz)
    
# # if(mem_type==new_mem):
# #     print("The number of pins saved is :",0)
# # else:
# print(cpu_sz)

